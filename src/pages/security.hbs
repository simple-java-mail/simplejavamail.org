{{#> layouts/base head-sub-title="Security" page-title="Simple Java Mail Security settings" }}

	{{#*inline "html-head-block"}}
		<meta name="Description" content="Summary of all security related settings in Simple Java Mail">
	{{/inline}}

	{{#*inline "header-block"}}
		{{> includes/header topic="security" }}
	{{/inline}}

	{{#*inline "body-block"}}
		<section>
			<p class="wide">
				Simple Java Mail provides an easy API to access all underlying Jakarta Mail security related
				settings as well as a few extra options, including CLRF injection scanning, DKIM and S/MIME support.
			</p>
		</section>

		<section class="toc">
			<ul>
				<li><a href="#section-authentication-methods">Authentication methods with transport strategies</a></li>
				<li><a href="#section-transport-strategy-smtp" class="indent">TransportStrategy.SMTP</a></li>
				<li><a href="#section-transport-strategy-smtps" class="indent">TransportStrategy.SMTPS</a></li>
				<li><a href="#section-transport-strategy-tls" class="indent">TransportStrategy.SMTP_TLS</a></li>
				<li><a href="#section-transport-strategy-oauth2" class="indent">TransportStrategy.OAUTH2</a></li>
				<li><a href="#section-custom-ssl-factory">Configure your own SSL connection factory</a></li>
				<li><a href="#section-whitelist-hosts">Whitelisting hosts</a></li>
				<li><a href="#section-verify-server-identity">Verifying server identity</a></li>
				<li><a href="#section-crlf-scanning">Scanning for suspicious content</a></li>
				<li><a href="#section-sending-dkim">Signing emails with DKIM</a></li>
				<li><a href="#section-sending-smime">Signing / encrypting emails with S/MIME</a></li>
				<li><a href="#section-reading-smime">Reading S/MIME signed / encrypted attachments</a></li>
				<li><a href="#section-reading-smime-merging" class="indent">S/MIME signed messages are merged by default</a></li>
				<li><a href="#section-reading-smime-decryption" class="indent">Decrypting S/MIME attachments using certificate</a></li>
			</ul>
		</section>


		<a href="#section-authentication-methods" id="section-authentication-methods" class="section-link h2">&sect;</a>
		<h2>Authentication methods with transport strategies</h2>

		<section>
			<div>
				<p class="wide">
					Although Simple Java Mail started out as a library to help produce RFC-anatomically correct emails, one of its
					primary drivers now is to simplify configuration, using <em>transport strategies</em>.
				</p>
				<p class="wide">
					There are four strategies:
				</p>
				<pre><code>MailerBuilder
  .withSMTPServer("host", port, "username", passwordOrOAUTH2Token)
  .withTransportStrategy(TransportStrategy.SMTP)
  .withTransportStrategy(TransportStrategy.SMTPS)
  .withTransportStrategy(TransportStrategy.SMTP_TLS)
  .withTransportStrategy(TransportStrategy.SMTP_OAUTH2)
</code></pre>
				<p class="wide">
					Or with property default:
				</p>
				<pre><code class="language-properties small">simplejavamail.transportstrategy=SMTP
# or: SMTPS, SMTP_TLS, SMTP_OATH2
</code></pre>
				<p>Let's quickly review them one-by-one.</p>
			</div>
		</section>


		<a href="#section-transport-strategy-smtp" id="section-transport-strategy-smtp" class="section-link h3">&sect;</a>
		<h3>TransportStrategy.SMTP</h3>

		<section>
			<div class="view">
				<p>
					This transport strategy falls back to plaintext when a mail server does not indicate support for
					STARTTLS. Additionally, even if a TLS session is negotiated, <strong>server certificates are not validated in
					any way</strong>.
				</p>
			</div>
			<div class="side">
<pre><code>MailerBuilder.withTransportStrategy(TransportStrategy.SMTP);</code></pre>
			</div>
		</section>
		<section>
			<div>
				<p class="wide">
					Furthermore, this transport strategy only offers protection against passive network eavesdroppers when the mail server
					indicates support for STARTTLS. Active network attackers can trivially bypass the encryption 1) by tampering with
					the STARTTLS indicator, 2) by presenting a self-signed certificate, 3) by presenting a certificate issued by an
					untrusted certificate authority; or 4) by presenting a certificate that was issued by a valid certificate
					authority to a domain other than the mail server's.
				</p>
				<p class="wide">
					For proper mail transport encryption, use <code class="inline language-java">TransportStrategy.SMTPS</code> or <code class="inline language-java">TransportStrategy.SMTP_TLS</code>.
				</p>
			</div>
		</section>
		<section>
			<div class="view">
				<p>
					To disable opportunistic TLS and revert back to the legacy SMTP_PLAIN behavior prior to 5.0.0
					(not recommended), you can turn it off programmatically or by setting the property
					<code class="inline language-properties">simplejavamail.opportunistic.tls</code>.
				</p>
			</div>
			<div class="side">
      <pre><code>
TransportStrategy.SMTP.setOpportunisticTLS(false);
MailerBuilder.withTransportStrategy(TransportStrategy.SMTP);
// or as property:
simplejavamail.opportunistic.tls=false
</code></pre>
			</div>
		</section>


		<a href="#section-transport-strategy-smtps" id="section-transport-strategy-smtps" class="section-link h3">&sect;</a>
		<h3>TransportStrategy.SMTPS</h3>

		<section>
			<p class="wide">
				SMTP entirely encapsulated by TLS. Commonly known as SMTPS.
			</p>
			<pre><code>MailerBuilder.withTransportStrategy(TransportStrategy.SMTPS);</code></pre>

			<p class="wide">
				Strict validation of server certificates is enabled. Server certificates must be issued
			</p>
			<ol class="indent">
				<li>by a certificate authority in the system trust store; and</li>
				<li>to a subject matching the identity of the remote SMTP server.</li>
			</ol>
		</section>


		<a href="#section-transport-strategy-tls" id="section-transport-strategy-tls" class="section-link h3">&sect;</a>
		<h3>TransportStrategy.SMTP_TLS</h3>

		<section>
			<p class="wide">
				Plaintext SMTP with a mandatory, authenticated STARTTLS upgrade.
			</p>
			<pre><code>MailerBuilder.withTransportStrategy(TransportStrategy.SMTP_TLS);</code></pre>

			<p class="wide">
				Strict validation of server certificates is enabled. Server certificates must be issued
			</p>
			<ol class="indent">
				<li>by a certificate authority in the system trust store; and</li>
				<li>to a subject matching the identity of the remote SMTP server.</li>
			</ol>
		</section>
		<section>
			<div>
				<p class="wide">
					To quote FastMail on the <a href="https://www.fastmail.help/hc/en-us/articles/360058753834">differences between SSL and TLS</a>:
				</p>
				<blockquote>
					<p class="wide">
						<strong>SSL and TLS</strong> both provide a way to encrypt a communication channel between two computers (e.g. your computer
						and our server). TLS is the successor to SSL and the terms SSL and TLS are used interchangeably unless you're
						referring to a specific version of the protocol.
					</p>
				</blockquote>
				<blockquote>
					<p class="wide">
						The ordering of protocols in terms of oldest to newest is: SSL v2, SSL v3, TLS v1.0, TLS v1.1, TLS v1.2, TLS v1.3 (currently proposed).
					</p>
				</blockquote>
			</div>
		</section>


		<a href="#section-transport-strategy-oauth2" id="section-transport-strategy-oauth2" class="section-link h3">&sect;</a>
		<h3>TransportStrategy.OAUTH2</h3>

		<section>
			<p class="wide">
				OAUTH2 authentication is easy, just use the OAUTH2 TransportStrategy and provide the OAUTH2 token as the server password.
			</p>
<pre><code>MailerBuilder
  .withSMTPServer("host", port, "username", yourOAUTH2Token)
  .withTransportStrategy(TransportStrategy.OAUTH2);</code></pre>
		</section>


		<a href="#section-custom-ssl-factory" id="section-custom-ssl-factory" class="section-link h2">&sect;</a>
		<h2>Configure your own SSL connection factory</h2>

		<section>
			<div class="view">
				<p>
					Furthermore, you can take complete control of SSL connections by providing your own SSL connection factory:
				</p>
			</div>
			<div class="side">
<pre><code>MailerBuilder
	.withCustomSSLFactoryClass(theClassName) // or:
	.withCustomSSLFactoryInstance(theInstance) // takes precedence
	.buildMailer();
</code></pre>
				Or with property default:
				<pre><code class="language-properties small">simplejavamail.custom.sslfactory.class=you.project.YourSSLSocketFactory</code></pre>
			</div>
		</section>


		<a href="#section-whitelist-hosts" id="section-whitelist-hosts" class="section-link h2">&sect;</a>
		<h2>Whitelisting hosts</h2>

		<section>
			<div class="view">
				<p>
					Simple Java Mail by default trusts all hosts for SSL connections, but you can also selectively whitelist hosts.
				</p>
				<p>
					Note that this is not the same as server identity verification, which is enabled through <code class="inline language-java">verifyingServerIdentity(boolean)</code>.
					It would be prudent to have at least one of these features turned on, lest you be vulnerable to man-in-the-middle attacks.
				</p>
			</div>
			<div class="side">
<pre><code>MailerBuilder
	// disable trust all hosts for SSL connections
	.trustingAllHosts(false);
	// or white list hosts for SSL connections (identity key validation notwithstanding)
	.trustingSSLHosts("a", "b", "c", ...);
</code></pre>
				Or with property default:
				<pre><code class="language-properties small">simplejavamail.defaults.trustallhosts=false
# following property is ignored when trustallhosts is true:
simplejavamail.defaults.trustedhosts=192.168.1.122;mymailserver.com;ix55432y</code></pre>
			</div>
		</section>


		<a href="#section-verify-server-identity" id="section-verify-server-identity" class="section-link h2">&sect;</a>
		<h2>Verifying server identity</h2>

		<section>
			<p class="wide">
				Simple Java Mail also enables server identity verification for SSL connections by default (also see <a href="http://www.ietf.org/rfc/rfc2595.txt">RFC 2595</a>,
				2.4. Server Identity Check). This is a security feature that verifies the server identity by checking the server's certificate against
				the host name used by the client to start the connection.
			</p>
			<p class="wide">
				Note that this is not the same as <code class="inline language-java">trustingAllHosts(boolean)</code> or <code class="inline language-java">trustingSSLHosts(String...)</code>.
				Again, it would be prudent to have at least one of these features turned on, lest you be vulnerable to man-in-the-middle attacks.
			</p>
<pre><code>MailerBuilder
	.verifyingServerIdentity(false);
</code></pre>
				Or with property default:
				<pre><code class="language-properties small">simplejavamail.defaults.verifyserveridentity=true</code></pre>
		</section>


		<a href="#section-crlf-scanning" id="section-crlf-scanning" class="section-link h2">&sect;</a>
		<h2>Scanning for suspicious content</h2>

		<section>
			<p class="wide">
				Finally, Simple Java Mail by default tests most fields and headers for suspicious content, which could indicate a
				<strong>CRLF injection attack</strong>. This is a unique feature of Simple Java Mail.
			</p>

			<p class="wide" style="margin-top: 1em">
				The values being scanned are:
			</p>
			<ul class="indent">
				<li>subject</li>
				<li>every header name and value</li>
				<li>every attachment name, nested datasource name and description</li>
				<li>every embedded image name, nested datasource name and description</li>
				<li>from recipient name and address</li>
				<li>replyTo recipient name and address, if provided</li>
				<li>bounceTo recipient name and address, if provided</li>
				<li>every TO/CC/BCC recipient name and address</li>
				<li>disposition-notification-to recipient name and address, if provided</li>
				<li>return-receipt-to recipient names and addresses, if provided</li>
			</ul>

			<p class="wide">
				Here's some more info on this topic:
			</p>
			<ul class="indent">
				<li><a href="https://web.archive.org/web/20160331233647/http://www.cakesolutions.net/teamblogs/2008/05/08/email-header-injection-security">Email Header Injection security</a></li>
				<li><a href="https://security.stackexchange.com/a/54100/110048">StackExchange - What threats come from CRLF in email generation?</a></li>
				<li><a href="https://archive.ph/NuETu">OWASP - Testing for IMAP SMTP Injection</a></li>
				<li><a href="https://archive.ph/uReuD">CWE-93: Improper Neutralization of CRLF Sequences ('CRLF Injection')</a></li>
			</ul>

			<p class="wide">
				This behaviour can only be turned off by turning off all client validations, which also includes checking for email completeness and email-address validations.
				The scans will still be performed, but issues found will only be logged as warnings.
			</p>
<pre><code>MailerBuilder
	.disablingAllClientValidation(true);
</code></pre>
		</section>


		<a href="#section-sending-dkim" id="section-sending-dkim" class="section-link h2">&sect;</a>
		<h2>Signing emails with DKIM</h2>

		<section>
			<div class="view">
				<p>
					Simple Java Mail also supports signing with <a href="https://www.endpointdev.com/blog/2014/04/spf-dkim-and-dmarc-brief-explanation/">DKIM</a>
					domain keys. DKIM is an optional feature and if you want to use it, you need to include the
					<strong><a href="modules.html#dkim-module">dkim-module</a></strong>.
				</p>
			</div>
			<div class="side">
<pre><code>currentEmailBuilder.signWithDomainKey(
	DkimConfig.builder()
		.dkimPrivateKeyData(byte[] / File / InputStream)
		.dkimSigningDomain("your_domain.org")
		.dkimSelector("your_selector")
		.useLengthParam(true) // default is false
		.excludedHeadersFromDkimDefaultSigningList("From", "Subject") // default is none
		.headerCanonicalization(SIMPLE) // default is RELAXED
		.bodyCanonicalization(SIMPLE) // default is RELAXED
		.signingAlgorithm(SHA256_WITH_ED25519) // default is SHA256_WITH_RSA
		.build()
);
</code></pre>
				Or with properties:
				<pre><code class="language-properties small"># defaults on Mailer level:
simplejavamail.dkim.signing.private_key_file_or_data=my_dkim_key.der # or key as base64
simplejavamail.dkim.signing.selector=dkim1
simplejavamail.dkim.signing.signing_domain=your-domain.com
simplejavamail.dkim.signing.use_length_param=true
simplejavamail.dkim.signing.excluded_headers_from_default_signing_list=From
simplejavamail.dkim.signing.header_canonicalization=SIMPLE
simplejavamail.dkim.signing.body_canonicalization=SIMPLE
simplejavamail.dkim.signing.algorithm=SHA256_WITH_ED25519
</code></pre>
			</div>
		</section>

		<section>
			<p class="wide">
				You can also use the helper method to sign a message yourself, but beware that the signing
				is only triggered when the MimeMessage streamed to a transport (or file):
			</p>
			<div class="wide">
				<pre><code class="small">MailerHelper.signMessageWithDKIM(mimeMessageToSign, emailContainingSigningDetails);</code></pre>
			</div>
		</section>

		<section>
			<div class="view">
				<p><strong>Excluding headers</strong></p>
				<p>
					By default, DKIM signs a fixed list of possible headers. If you need more control of which headers are signed,
					you can provide a list of headers that should be skipped from this list.
				</p>
			</div>
			<div class="side">
<pre><code class="small">	DkimConfig.builder()
		(..)
		.excludedHeadersFromDkimDefaultSigningList("Message-ID", "Date", "Return-Path", "Bounces-To")
		.build()
</code></pre>
			</div>
		</section>


		<a href="#section-sending-smime" id="section-sending-smime" class="section-link h2">&sect;</a>
		<h2>Signing / encrypting emails with S/MIME</h2>

		<section>
			<div class="view">
				<p>
					Simple Java Mail supports signing and encrypting with <a href="https://www.globalsign.com/en/blog/what-is-s-mime/">S/MIME</a>.
					S/MIME is an optional feature and if you want to use it, you need to include the
					<strong><a href="modules.html#smime-module">smime-module</a></strong>.
				</p>
				<br/>
				<p>
					You can sign, encrypt or both sign and encrypt an email. In the latter case the email will first be signed
					and then encrypted, as per
					<a href="https://github.com/markenwerk/java-utils-mail-smime#using-the-library-as-a-sender-" target="_blank">
						advice</a> of the underlying library. All signing/encrypting is performed when the email is being sent.
				</p>
				<br/>
				<p>
					You can <strong>sign individual emails</strong> or <strong>sign all emails</strong> by configuring S/MIME on the <em>Mailer</em>
					instead.
				</p>
				<br/>
				<p>
					For maximum flexibility, you can configure all algorithms and certificates specific to S/MIME signing and encryption. This includes
					choosing the key encapsulation algorithm and cipher algorithm for encryption, and the signature algorithm for signing. For a list of
					available algorithms, see the <code class="inline language-java">SmimeEncryptConfig</code> and
					<code class="inline language-java">SmimeSignConfig</code> classes.
				</p>
			</div>
			<div class="side">
				Signing an email:
				<pre><code>Pkcs12Config myKeyInfo = Pkcs12Config.builder()
    .pkcs12Store("my_smime_keystore.pkcs12")
    .storePassword("my_store_password")
    .keyAlias("my_key_alias")
    .keyPassword("my_key_password")
    .build();

Email emailToBeSigned = currentEmailBuilder.
    .(..)
    .signWithSmime(SmimeSignConfig.builder
		.pkcs12Config(myKeyInfo)
		.signatureAlgorithm("SHA256withRSA") // optional
		.build())
    .buildEmail();

mailer.sendMail(emailToBeSigned);
</code></pre>
				Encrypting an email:
				<pre><code>Email emailToBeEncrypted = currentEmailBuilder
    .(..)
    .encryptWithSmime(SmimeEncryptConfig.builder()
		.x509Certificate("x509CertificateInStandardPEM.crt")
		.keyEncapsulationAlgorithm("RSA_OAEP_SHA384") // optional
		.cipherAlgorithm("AES256_CBC") // optional
		.build())
    .buildEmail();

mailer.sendMail(emailToBeEncrypted);
</code></pre>
				Sign all emails by default (this works for encryption as well):
				<pre><code>currentMailerBuilder
    (...)
    .withEmailDefaults(EmailBuilder.startingBlank()
		.signWithSmime(myPkcs12Config)
		.buildEmail())
    .buildMailer();
</code></pre>
				Or with properties:
				<pre><code class="language-properties small"># defaults on Mailer level:
simplejavamail.smime.signing.keystore=my_smime_keystore.pkcs12
simplejavamail.smime.signing.keystore_password=keystore_password
simplejavamail.smime.signing.key_alias=key_alias
simplejavamail.smime.signing.key_password=key_password
simplejavamail.smime.signing.algorithm=SHA256withRSA
# encryption can only be applied to individual Email instances
# but this can be default behaviour (not recommended as users would need to share private keys)
simplejavamail.smime.encryption.certificate=x509CertificateInStandardPEM.crt
simplejavamail.smime.encryption.key_encapsulation_algorithm=RSA
simplejavamail.smime.encryption.cipher_algorithm=DES_EDE3_CBC
</code></pre>
			</div>
		</section>


		<a href="#section-reading-smime" id="section-reading-smime" class="section-link h2">&sect;</a>
		<h2>Reading S/MIME signed / encrypted attachments</h2>

		<section>
			<div class="view">
				<p>
					Simple Java Mail can automatically handle
					<a href="https://docs.ipswitch.com/moveit/central/onlineguide/en/MICSMIMEEmailOverview.htm">S/MIME signed messages</a>
					or attachments and has some useful extras such as providing you with metadata.
				</p>
				<p>S/MIME is an optional feature and if you want to use it, you need to include the
					<strong><a href="modules.html#smime-module">smime-module</a></strong>.
				</p>
			</div>
			<div class="side">
<pre><code class="small">Email mergedEmail = EmailConverter.outlookMsgToEmail("yourSMIMESignedMessage.msg"); // or
Email mergedEmail = EmailConverter.emlToEmail("yourSMIMESignedMessage.eml");

// all attachments as-is:
mergedEmail.getAttachments(); // smime.p7m, my-doc.docx
// all attachments with the encrypted ones replaced:
mergedEmail.getDecryptedAttachments(); // signed-email.eml, my-doc.docx

// if the message itself was signed (rather than a independently signed attachment):
OriginalSmimeDetails details = mergedEmail.getOriginalSmimeDetails();
details.getSmimeMode(); // SIGNED
details.getSmimeMime(); // application/pkcs7-mime or multipart/signed
details.getSmimeType(); // signed-data, enveloped-data
details.getSmimeName(); // smime.p7m or smime.p7s
details.getSmimeMicalg(); // ie. sha-512
details.getSmimeSignedBy(); // email or name used
</code></pre>
			</div>
		</section>


		<a href="#section-reading-smime-merging" id="section-reading-smime-merging" class="section-link h3">&sect;</a>
		<h3>S/MIME signed messages are merged by default</h3>

		<section>
			<div class="view">
				<p>
					As an S/MIME signed message is actually nested as an attachment, the default behavior is to merge the S/MIME signed content into the root message.
					This only happens if there was exactly one S/MIME signed attachment and the decrypted version is of type "message/rfc822".
				</p>
				<p>
					This default behavior can be deactivated. For your convenience, the decrypted message is available as a separate Email instance:
				</p>
			</div>

			<div class="side">
<pre><code class="small">Email nonMergedEmail = EmailBuilder
                .copying(mergedEmail)
                .clearSMIMESignedAttachmentMergingBehavior()
                .buildEmail();

// or by configuring the intermediary builder:
emailBuilder = EmailConverter.outlookMsgToEmailBuilder(msgFile); // or
emailBuilder = EmailConverter.emlToEmailBuilder(emlFile);
Email nonMergedEmail = emailBuilder
                .notMergingSingleSMIMESignedAttachment()
                .buildEmail();</code></pre>
				You always have access to the nested decrypted message:
				<pre><code class="small">mergedEmail.getSmimeSignedEmail();
nonMergedEmail.getSmimeSignedEmail();
</code></pre>
			</div>
		</section>

		<section>
			<div class="view">
				<p>If a message is <em>both</em> signed and encrypted, <code class="inline language-java">getSmimeSignedEmail()</code>
					will itself have a nested <code class="inline language-java">getOriginalSmimeDetails().</code></p>
			</div>

			<div class="side">
      <pre><code class="small">
        signedAndEncrypted.getOriginalSmimeDetails().smimeMode(); // SIGNED_ENCRYPTED
        Email signedOrEncrypted = signedAndEncrypted.getSmimeSignedEmail();

        signedOrEncrypted.getOriginalSmimeDetails().smimeMode(); // SIGNED or ENCRYPTED

        // whether it is SIGNED or ENCRYPTED depends on the order in which the original
        // email client handled this S/MIME scenario
</code></pre>
			</div>
		</section>


		<a href="#section-reading-smime-decryption" id="section-reading-smime-decryption" class="section-link h3">&sect;</a>
		<h3>Decrypting S/MIME attachments using certificate</h3>

		<section>
			<p class="wide">
				Every conversion method optionally accepts a
				<a href="https://javadoc.io/doc/org.simplejavamail/maven-master-project/latest/org/simplejavamail/api/mailer/config/Pkcs12Config.html" target="_blank">Pkcs12Config</a>
				instance, which contains details about your key store and certificate. With that, you can decrypt an S/MIME encrypted mail.
			</p>

			<div class="wide">
<pre><code>Pkcs12Config yourPkcs12Config = Pkcs12Config.builder()
      .pkcs12Store("smime_keystore.pkcs12") // path, File or InputStream
      .storePassword("letmein")
      .keyAlias("smime_test_user_alias")
      .keyPassword("letmein")
      .build();

EmailConverter.outlookMsgToEmail("yourSMIMEEncryptedMessage.msg", yourPkcs12Config); // or
EmailConverter.emlToEmail("yourSMIMEEncryptedMessage.eml", yourPkcs12Config);

mergedEmail.getOriginalSmimeDetails().getSmimeMode(); // ENCRYPTED or SIGNED_ENCRYPTED
</code></pre>
			</div>
		</section>

	{{/inline}}

{{/layouts/base}}